//Anthony Nunn
//email: avnunn@gmail.com
//site: anthonynunn.org

//Euler 8
//Date: 7/12/2010
//http://projecteuler.net/index.php?section=problems&id=8

//Problem:
//Find the greatest product of five consecutive digits in the 1000-digit number.
//73167176531330624919225119674426574742355349194934
//96983520312774506326239578318016984801869478851843
//85861560789112949495459501737958331952853208805511
//12540698747158523863050715693290963295227443043557
//66896648950445244523161731856403098711121722383113
//62229893423380308135336276614282806444486645238749
//30358907296290491560440772390713810515859307960866
//70172427121883998797908792274921901699720888093776
//65727333001053367881220235421809751254540594752243
//52584907711670556013604839586446706324415722155397
//53697817977846174064955149290862569321978468622482
//83972241375657056057490261407972968652414535100474
//82166370484403199890008895243450658541227588666881
//16427171479924442928230863465674813919123162824586
//17866458359124566529476545682848912883142607690042
//24219022671055626321111109370544217506941658960408
//07198403850962455444362981230987879927244284909188
//84580156166097919133875499200524063689912560717606
//05886116467109405077541002256983155200055935729725
//71636269561882670428252483600823257530420752963450

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main(){
	//1000-digit number
	string sNumber =
		"73167176531330624919225119674426574742355349194934\
		96983520312774506326239578318016984801869478851843\
		85861560789112949495459501737958331952853208805511\
		12540698747158523863050715693290963295227443043557\
		66896648950445244523161731856403098711121722383113\
		62229893423380308135336276614282806444486645238749\
		30358907296290491560440772390713810515859307960866\
		70172427121883998797908792274921901699720888093776\
		65727333001053367881220235421809751254540594752243\
		52584907711670556013604839586446706324415722155397\
		53697817977846174064955149290862569321978468622482\
		83972241375657056057490261407972968652414535100474\
		82166370484403199890008895243450658541227588666881\
		16427171479924442928230863465674813919123162824586\
		17866458359124566529476545682848912883142607690042\
		24219022671055626321111109370544217506941658960408\
		07198403850962455444362981230987879927244284909188\
		84580156166097919133875499200524063689912560717606\
		05886116467109405077541002256983155200055935729725\
		71636269561882670428252483600823257530420752963450";



	//Will hold the 1000-digit number as an actual number
	vector<unsigned int> vNumbers;
	int indexGreatest = 0;

	const unsigned int CHARTOINT = 48;
	const unsigned int BACKSPACE = 9;
	const unsigned int CONSECUTIVE = 5;
	const unsigned int WIDTH = 50;
	const unsigned int HEIGHT = 20;

	//for each digit
	for (int i = 0; i < sNumber.size(); ++i){
		//if the digit is not the endline
		if (sNumber[i] != BACKSPACE){
			//convert the char to a number and put it into the list
			vNumbers.push_back((sNumber[i]-CHARTOINT));
		}
	}

	//print out the problem
	cout << "Find the greatest product of five consecutive digits in the 1000-digit number." << "\n";
	cout << "\n";
	for (int i = 0, widthCount = 0; i < vNumbers.size(); ++i, ++widthCount){
		if (widthCount == WIDTH){
			cout << "\n";
			widthCount = 0;
		}

		cout << vNumbers[i];
	}
	cout << "\n\n";

	unsigned int greatestProduct = 0;
	for (int i = 0; i < vNumbers.size()-CONSECUTIVE; ++i){
		unsigned int tempGreatestProduct = 1;
		for (int j = 0; j < CONSECUTIVE; ++j){
			tempGreatestProduct *= vNumbers[i+j];
		}

		if (tempGreatestProduct > greatestProduct){
			greatestProduct = tempGreatestProduct;
			indexGreatest = i;
			//cout << "Possible greatest product = " << greatestProduct << "\n";
		}
	}

	cout << "Greatest product = " << greatestProduct << "\n";
	cout << "Index: " << indexGreatest << "\n";
	cout << "Column: " << (indexGreatest%WIDTH)+1 << " Row: " << (indexGreatest/WIDTH)+1 << "\n";
	cout << "Digits: ";
	for (int i = indexGreatest; i < indexGreatest+CONSECUTIVE; ++i){
		cout << vNumbers[i];
	}
	cout << "\n";

	return 0;
}